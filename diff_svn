diff --git a/README b/README
index 567d97c..5bde4a7 100644
--- a/README
+++ b/README
@@ -1,4 +1,4 @@
-                 Piwik - piwik.org
+                 PgPiwik - piwik.org
 
 Description 
 ===========	
@@ -21,13 +21,15 @@ Piwik is released under the GPL v3 license, see misc/license.txt
 Requirements
 ============
 - php 5.1.3 minimum
-- mysql 4.1
+- postgresql 8.3
 - php PDO module enabled
 - OS / server independant
 
 Install 
 =======
 - Upload piwik in your webserver 
+- Create user and database
+- Execute the misc/PDO_PGSQL.sql file in your piwik database
 - Point your browser to the directory
 - Follow the steps
 - Add the given javascript code to your pages
diff --git a/config/config.ini.sample.php b/config/config.ini.sample.php
index 9773615..f17fd85 100644
--- a/config/config.ini.sample.php
+++ b/config/config.ini.sample.php
@@ -14,5 +14,5 @@ host			= localhost
 username		= databaseLogin
 password		= datatabasePassword
 dbname			= databaseName
-adapter			= PDO_MYSQL ; PDO_MYSQL or MYSQLI
+adapter			= PDO_PGSQL ;
 tables_prefix	= piwik_
diff --git a/config/global.ini.php b/config/global.ini.php
index 426d53c..836be2c 100755
--- a/config/global.ini.php
+++ b/config/global.ini.php
@@ -17,8 +17,8 @@ username		=
 password		= 
 dbname			= 
 tables_prefix	= 
-port			= 3306
-adapter			= PDO_MYSQL ; PDO_MYSQL or MYSQLI
+port			= 5432
+adapter 		= PDO_PGSQL ; 
 
 [database_tests]
 host 			= localhost
@@ -26,8 +26,8 @@ username 		= root
 password 		= 
 dbname			= piwik_tests
 tables_prefix	= piwiktests_
-port			= 3306
-adapter 		= PDO_MYSQL
+port			= 5432
+adapter 		= PDO_PGSQL
  
 [Debug]
 ; if set to 1, the archiving process will always be triggered, even if the archive has already been computed
@@ -86,8 +86,8 @@ show_website_selector_in_user_interface = 1
 ; PHP minimum required version (minimum requirement known to date = ->newInstanceArgs)
 minimum_php_version = 5.1.3
 
-; MySQL minimum required version
-minimum_mysql_version = 4.1
+; PgSQL minimum required version
+minimum_pgsql_version = 8.3 
 
 ; Minimum adviced memory limit in php.ini file (see memory_limit value)
 minimum_memory_limit = 128
@@ -254,4 +254,5 @@ PluginsInstalled[] = SitesManager
 PluginsInstalled[] = Installation
 
 [Plugins_Tracker]
-Plugins_Tracker[] = Provider
\ No newline at end of file
+Plugins_Tracker[] = Provider
+
diff --git a/core/Archive/Single.php b/core/Archive/Single.php
index 4035e28..5110ed7 100644
--- a/core/Archive/Single.php
+++ b/core/Archive/Single.php
@@ -239,12 +239,6 @@ class Piwik_Archive_Single extends Piwik_Archive
 			return $value;
 		}
 		
-		// uncompress when selecting from the BLOB table
-		if($typeValue == 'blob')
-		{
-			$value = gzuncompress($value);
-		}
-		
 		if($typeValue == 'numeric' 
 			&& $this->cacheEnabledForNumeric)
 		{
diff --git a/core/ArchiveProcessing.php b/core/ArchiveProcessing.php
index da16e44..e30ab7e 100644
--- a/core/ArchiveProcessing.php
+++ b/core/ArchiveProcessing.php
@@ -441,13 +441,7 @@ abstract class Piwik_ArchiveProcessing
 	protected function loadNextIdarchive()
 	{
 		$db = Zend_Registry::get('db');
-		$id = $db->fetchOne("/* SHARDING_ID_SITE = ".$this->idsite." */ SELECT max(idarchive) FROM ".$this->tableArchiveNumeric->getTableName());
-		if(empty($id))
-		{
-			$id = 0;
-		}
-		$this->idArchive = $id + 1;
-		
+		$this->idArchive = $db->fetchOne("/* SHARDING_ID_SITE = ".$this->idsite." */ SELECT nextval('idarchive_seq')");
 	}
 
 	/**
diff --git a/core/ArchiveProcessing/Day.php b/core/ArchiveProcessing/Day.php
index 77558a3..d6c22da 100644
--- a/core/ArchiveProcessing/Day.php
+++ b/core/ArchiveProcessing/Day.php
@@ -58,7 +58,6 @@ class Piwik_ArchiveProcessing_Day extends Piwik_ArchiveProcessing
 					WHERE visit_server_date = ?
 						AND idsite = ?
 					GROUP BY visit_server_date
-					ORDER BY NULL
 				 ";
 		$row = $this->db->fetchRow($query, array($this->strDateStart,$this->idsite ) );
 		
diff --git a/core/ArchiveProcessing/Record/Blob.php b/core/ArchiveProcessing/Record/Blob.php
index 86847a1..429213b 100644
--- a/core/ArchiveProcessing/Record/Blob.php
+++ b/core/ArchiveProcessing/Record/Blob.php
@@ -24,7 +24,6 @@ class Piwik_ArchiveProcessing_Record_Blob extends Piwik_ArchiveProcessing_Record
 	
 	function __construct( $name, $value)
 	{
-		$value = gzcompress($value);
 		parent::__construct( $name, $value );
 	}
 	
diff --git a/core/Option.php b/core/Option.php
index a1d13fd..f5a424d 100644
--- a/core/Option.php
+++ b/core/Option.php
@@ -41,7 +41,7 @@ class Piwik_Option
 			return $this->all[$name];
 		}
 		$value = Piwik_FetchOne( 'SELECT option_value 
-							FROM `' . Piwik::prefixTable('option') . '`
+							FROM ' . Piwik::prefixTable('option') . '
 							WHERE option_name = ?', $name);
 		if($value === false)
 		{
@@ -61,10 +61,14 @@ class Piwik_Option
 	public function set($name, $value, $autoload = 0)
 	{
 		$autoload = (int)$autoload;
-		Piwik_Query('INSERT INTO `'. Piwik::prefixTable('option') . '` (option_name, option_value, autoload) '.
-					' VALUES (?, ?, ?) '.
-					' ON DUPLICATE KEY UPDATE option_value = ?', 
-					array($name, $value, $autoload, $value));
+		if (!Piwik_Query('UPDATE '. Piwik::prefixTable('option') .
+					' SET option_value = ? '.
+					' WHERE option_name = ? ',
+					array($value, $name))){
+			Piwik_Query('INSERT INTO '. Piwik::prefixTable('option') . ' (option_name, option_value, autoload) '.
+						' VALUES (?, ?, ?) ',
+						array($name, $value, $autoload));
+		}
 		$this->all[$name] = $value;
 	}
 	
@@ -76,7 +80,7 @@ class Piwik_Option
 			return;
 		}
 		$all = Piwik_FetchAll('SELECT option_value, option_name
-								FROM `'. Piwik::prefixTable('option') . '` 
+								FROM '. Piwik::prefixTable('option') . '
 								WHERE autoload = 1');
 		foreach($all as $option)
 		{
diff --git a/core/Piwik.php b/core/Piwik.php
index e987523..532c748 100644
--- a/core/Piwik.php
+++ b/core/Piwik.php
@@ -474,229 +474,237 @@ class Piwik
 		$config = Zend_Registry::get('config');
 		$prefixTables = $config->database->tables_prefix;
 		$tables = array(
-			'user' => "CREATE TABLE {$prefixTables}user (
-						  login VARCHAR(20) NOT NULL,
-						  password CHAR(32) NOT NULL,
-						  alias VARCHAR(45) NOT NULL,
-						  email VARCHAR(100) NOT NULL,
-						  token_auth CHAR(32) NOT NULL,
-						  date_registered TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
-						  PRIMARY KEY(login),
-						  UNIQUE INDEX uniq_keytoken(token_auth)
-						)  DEFAULT CHARSET=utf8 
-			",
-			
-			'access' => "CREATE TABLE {$prefixTables}access (
-						  login VARCHAR(20) NOT NULL,
-						  idsite INTEGER UNSIGNED NOT NULL,
-						  access VARCHAR(10) NULL,
-						  PRIMARY KEY(login, idsite)
-						)  DEFAULT CHARSET=utf8 
-			",
-			
 			'site' => "CREATE TABLE {$prefixTables}site (
-						  idsite INTEGER(10) UNSIGNED NOT NULL AUTO_INCREMENT,
-						  name VARCHAR(90) NOT NULL,
-						  main_url VARCHAR(255) NOT NULL,
-  						  ts_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
-						  PRIMARY KEY(idsite)
-						)  DEFAULT CHARSET=utf8 
-			",
-			
-			'site_url' => "CREATE TABLE {$prefixTables}site_url (
-							  idsite INTEGER(10) UNSIGNED NOT NULL,
-							  url VARCHAR(255) NOT NULL,
-							  PRIMARY KEY(idsite, url)
-						)  DEFAULT CHARSET=utf8 
-			",
-			
-			'goal' => "	CREATE TABLE `{$prefixTables}goal` (
-							  `idsite` int(11) NOT NULL,
-							  `idgoal` int(11) NOT NULL,
-							  `name` varchar(50) NOT NULL,
-							  `match_attribute` varchar(20) NOT NULL,
-							  `pattern` varchar(255) NOT NULL,
-							  `pattern_type` varchar(10) NOT NULL,
-							  `case_sensitive` tinyint(4) NOT NULL,
-							  `revenue` float NOT NULL,
-							  `deleted` tinyint(4) NOT NULL default '0',
-							  PRIMARY KEY  (`idsite`,`idgoal`)
-							)  DEFAULT CHARSET=utf8 
+						  idsite SERIAL PRIMARY KEY,
+						  name TEXT NOT NULL,
+						  main_url TEXT NOT NULL,
+						  ts_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+						)
 			",
 			
 			'logger_message' => "CREATE TABLE {$prefixTables}logger_message (
-									  idlogger_message INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
-									  timestamp TIMESTAMP NULL,
-									  message TEXT NULL,
-									  PRIMARY KEY(idlogger_message)
-									)  DEFAULT CHARSET=utf8 
+									  idlogger_message SERIAL PRIMARY KEY,
+									  timestamp TIMESTAMP WITH TIME ZONE NULL,
+									  message TEXT NULL
+									)
 			",
 			
 			'logger_api_call' => "CREATE TABLE {$prefixTables}logger_api_call (
-									  idlogger_api_call INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
-									  class_name VARCHAR(255) NULL,
-									  method_name VARCHAR(255) NULL,
+									  idlogger_api_call SERIAL PRIMARY KEY,
+									  class_name TEXT NULL,
+									  method_name TEXT NULL,
 									  parameter_names_default_values TEXT NULL,
 									  parameter_values TEXT NULL,
 									  execution_time FLOAT NULL,
 									  caller_ip BIGINT NULL,
-									  timestamp TIMESTAMP NULL,
-									  returned_value TEXT NULL,
-									  PRIMARY KEY(idlogger_api_call)
-									)  DEFAULT CHARSET=utf8 
+									  timestamp TIMESTAMP WITH TIME ZONE NULL,
+									  returned_value TEXT NULL
+									)
 			",
 			
 			'logger_error' => "CREATE TABLE {$prefixTables}logger_error (
-									  idlogger_error INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
+									  idlogger_error SERIAL PRIMARY KEY,
 									  timestamp TIMESTAMP NULL,
 									  message TEXT NULL,
-									  errno INTEGER UNSIGNED NULL,
-									  errline INTEGER UNSIGNED NULL,
-									  errfile VARCHAR(255) NULL,
-									  backtrace TEXT NULL,
-									  PRIMARY KEY(idlogger_error)
-									) DEFAULT CHARSET=utf8 
+									  errno INTEGER  NULL CHECK (errno >= 0),
+									  errline INTEGER  NULL CHECK (errline >= 0),
+									  errfile TEXT NULL,
+									  backtrace TEXT NULL
+									)
 			",
 			
 			'logger_exception' => "CREATE TABLE {$prefixTables}logger_exception (
-									  idlogger_exception INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
-									  timestamp TIMESTAMP NULL,
+									  idlogger_exception SERIAL PRIMARY KEY,
+									  timestamp TIMESTAMP WITH TIME ZONE NULL,
 									  message TEXT NULL,
-									  errno INTEGER UNSIGNED NULL,
-									  errline INTEGER UNSIGNED NULL,
-									  errfile VARCHAR(255) NULL,
-									  backtrace TEXT NULL,
-									  PRIMARY KEY(idlogger_exception)
-									)  DEFAULT CHARSET=utf8 
+									  errno INTEGER  NULL CHECK (errno >= 0),
+									  errline INTEGER  NULL CHECK (errline >= 0),
+									  errfile TEXT NULL,
+									  backtrace TEXT NULL
+									)
 			",
 			
-			
 			'log_action' => "CREATE TABLE {$prefixTables}log_action (
-									  idaction INTEGER(10) UNSIGNED NOT NULL AUTO_INCREMENT,
-									  name VARCHAR(255) NOT NULL,
-  									  type TINYINT UNSIGNED NULL,
-									  PRIMARY KEY(idaction),
-									  INDEX index_type_name (type, name(15))
-						)  DEFAULT CHARSET=utf8 
+									  idaction SERIAL PRIMARY KEY,
+									  name TEXT NOT NULL,
+									  type INTEGER NULL CHECK (type >= 0)
+						)
 			",
 					
 			'log_visit' => "CREATE TABLE {$prefixTables}log_visit (
-							  idvisit INTEGER(10) UNSIGNED NOT NULL AUTO_INCREMENT,
-							  idsite INTEGER(10) UNSIGNED NOT NULL,
+							  idvisit SERIAL PRIMARY KEY,
+							  idsite INTEGER  NOT NULL REFERENCES {$prefixTables}site DEFERRABLE INITIALLY DEFERRED,
 							  visitor_localtime TIME NOT NULL,
-							  visitor_idcookie CHAR(32) NOT NULL,
-							  visitor_returning TINYINT(1) NOT NULL,
-							  visit_first_action_time DATETIME NOT NULL,
-							  visit_last_action_time DATETIME NOT NULL,
+							  visitor_idcookie TEXT NOT NULL,
+							  visitor_returning INTEGER NOT NULL,
+							  visit_first_action_time TIMESTAMP WITH TIME ZONE NOT NULL,
+							  visit_last_action_time TIMESTAMP WITH TIME ZONE NOT NULL,
 							  visit_server_date DATE NOT NULL,
-							  visit_exit_idaction INTEGER(11) NOT NULL,
-							  visit_entry_idaction INTEGER(11) NOT NULL,
-							  visit_total_actions SMALLINT(5) UNSIGNED NOT NULL,
-							  visit_total_time SMALLINT(5) UNSIGNED NOT NULL,
-							  visit_goal_converted TINYINT(1) NOT NULL,
-							  referer_type INTEGER UNSIGNED NULL,
-							  referer_name VARCHAR(70) NULL,
+							  visit_exit_idaction INTEGER NOT NULL,
+							  visit_entry_idaction INTEGER NOT NULL,
+							  visit_total_actions INTEGER NOT NULL CHECK (visit_total_actions >= 0),
+							  visit_total_time INTEGER NOT NULL CHECK (visit_total_time >= 0),
+							  visit_goal_converted INTEGER NOT NULL,
+							  referer_type INTEGER  NULL CHECK (referer_type >= 0),
+							  referer_name TEXT NULL,
 							  referer_url TEXT NOT NULL,
-							  referer_keyword VARCHAR(255) NULL,
-							  config_md5config CHAR(32) NOT NULL,
-							  config_os CHAR(3) NOT NULL,
-							  config_browser_name VARCHAR(10) NOT NULL,
-							  config_browser_version VARCHAR(20) NOT NULL,
-							  config_resolution VARCHAR(9) NOT NULL,
-							  config_pdf TINYINT(1) NOT NULL,
-							  config_flash TINYINT(1) NOT NULL,
-							  config_java TINYINT(1) NOT NULL,
-							  config_director TINYINT(1) NOT NULL,
-							  config_quicktime TINYINT(1) NOT NULL,
-							  config_realplayer TINYINT(1) NOT NULL,
-							  config_windowsmedia TINYINT(1) NOT NULL,
-							  config_cookie TINYINT(1) NOT NULL,
-							  location_ip BIGINT(11) NOT NULL,
-							  location_browser_lang VARCHAR(20) NOT NULL,
-							  location_country CHAR(3) NOT NULL,
-							  location_continent CHAR(3) NOT NULL,
-							  PRIMARY KEY(idvisit),
-							  INDEX index_idsite_date (idsite, visit_server_date)
-							)  DEFAULT CHARSET=utf8 
+							  referer_keyword TEXT NULL,
+							  config_md5config TEXT NOT NULL,
+							  config_os TEXT NOT NULL,
+							  config_browser_name TEXT NOT NULL,
+							  config_browser_version TEXT NOT NULL,
+							  config_resolution TEXT NOT NULL,
+							  config_pdf INTEGER NOT NULL,
+							  config_flash INTEGER NOT NULL,
+							  config_java INTEGER NOT NULL,
+							  config_director INTEGER NOT NULL,
+							  config_quicktime INTEGER NOT NULL,
+							  config_realplayer INTEGER NOT NULL,
+							  config_windowsmedia INTEGER NOT NULL,
+							  config_cookie INTEGER NOT NULL,
+							  location_ip BIGINT NOT NULL,
+							  location_browser_lang TEXT NOT NULL,
+							  location_country TEXT NOT NULL,
+							  location_continent TEXT NOT NULL
+							)
 			",		
 			
-			'log_conversion' => "CREATE TABLE `{$prefixTables}log_conversion` (
-									  `idvisit` int(10) unsigned NOT NULL,
-									  `idsite` int(10) unsigned NOT NULL,
-									  `visitor_idcookie` char(32) NOT NULL,
-									  `server_time` datetime NOT NULL,
-									  `visit_server_date` date NOT NULL,
-									  `idaction` int(11) NOT NULL,
-									  `idlink_va` int(11) NOT NULL,
-									  `referer_idvisit` int(10) unsigned default NULL,
-									  `referer_visit_server_date` date default NULL,
-									  `referer_type` int(10) unsigned default NULL,
-									  `referer_name` varchar(70) default NULL,
-									  `referer_keyword` varchar(255) default NULL,
-									  `visitor_returning` tinyint(1) NOT NULL,
-									  `location_country` char(3) NOT NULL,
-									  `location_continent` char(3) NOT NULL,
-									  `url` text NOT NULL,
-									  `idgoal` int(10) unsigned NOT NULL,
-									  `revenue` float default NULL,
-									  PRIMARY KEY  (`idvisit`,`idgoal`),
-									  KEY `index_idsite_date` (`idsite`,`visit_server_date`)
-									) DEFAULT CHARSET=utf8 
+			'log_link_visit_action' => "CREATE TABLE {$prefixTables}log_link_visit_action (
+											  idlink_va SERIAL PRIMARY KEY,
+											  idvisit INTEGER  NOT NULL,
+											  idaction INTEGER  NOT NULL,
+											  idaction_ref INTEGER NOT NULL,
+											  time_spent_ref_action INTEGER  NOT NULL CHECK (time_spent_ref_action >= 0)
+											)
 			",
 							
-			'log_link_visit_action' => "CREATE TABLE {$prefixTables}log_link_visit_action (
-											  idlink_va INTEGER(11) NOT NULL AUTO_INCREMENT,
-											  idvisit INTEGER(10) UNSIGNED NOT NULL,
-											  idaction INTEGER(10) UNSIGNED NOT NULL,
-											  idaction_ref INTEGER(11) UNSIGNED NOT NULL,
-											  time_spent_ref_action INTEGER(10) UNSIGNED NOT NULL,
-											  PRIMARY KEY(idlink_va),
-											  INDEX index_idvisit(idvisit)
-											)  DEFAULT CHARSET=utf8 
+			'user' => "CREATE TABLE {$prefixTables}user (
+						  login TEXT NOT NULL PRIMARY KEY,
+						  password TEXT NOT NULL,
+						  alias TEXT NOT NULL,
+						  email TEXT NOT NULL,
+						  token_auth TEXT NOT NULL UNIQUE,
+						  date_registered TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+						)
 			",
 		
-			'log_profiling' => "CREATE TABLE {$prefixTables}log_profiling (
-								  query TEXT NOT NULL,
-								  count INTEGER UNSIGNED NULL,
-								  sum_time_ms FLOAT NULL,
-								  UNIQUE INDEX query(query(100))
-								)  DEFAULT CHARSET=utf8 
+			'access' => "CREATE TABLE {$prefixTables}access (
+						  login TEXT NOT NULL,
+						  idsite INTEGER  NOT NULL REFERENCES {$prefixTables}site DEFERRABLE INITIALLY DEFERRED,
+						  access TEXT NULL,
+						  PRIMARY KEY(login, idsite)
+						)
 			",
 			
-			'option' => "CREATE TABLE `{$prefixTables}option` (
-								option_name VARCHAR( 64 ) NOT NULL ,
-								option_value LONGTEXT NOT NULL ,
-								autoload TINYINT NOT NULL DEFAULT '1',
-								PRIMARY KEY ( option_name )
-								)  DEFAULT CHARSET=utf8 
+			'site_url' => "CREATE TABLE {$prefixTables}site_url (
+							  idsite INTEGER NOT NULL REFERENCES {$prefixTables}site DEFERRABLE INITIALLY DEFERRED,
+							  url TEXT NOT NULL,
+							  PRIMARY KEY(idsite, url)
+						)
 			",
 								
+			'goal' => "	CREATE TABLE {$prefixTables}goal (
+							  idsite INTEGER NOT NULL REFERENCES {$prefixTables}site DEFERRABLE INITIALLY DEFERRED,
+							  idgoal INTEGER NOT NULL,
+							  name TEXT NOT NULL,
+							  match_attribute TEXT NOT NULL,
+							  pattern TEXT NOT NULL,
+							  pattern_type TEXT NOT NULL,
+							  case_sensitive INTEGER NOT NULL,
+							  revenue FLOAT NOT NULL,
+							  deleted INTEGER NOT NULL default 0,
+							  PRIMARY KEY  (idsite,idgoal)
+							)
+			",
+
+			'log_conversion' => "CREATE TABLE {$prefixTables}log_conversion (
+									  idvisit INTEGER NOT NULL REFERENCES {$prefixTables}log_visit DEFERRABLE INITIALLY DEFERRED,
+									  idsite INTEGER NOT NULL REFERENCES {$prefixTables}site DEFERRABLE INITIALLY DEFERRED,
+									  visitor_idcookie TEXT NOT NULL,
+									  server_time TIMESTAMP WITH TIME ZONE NOT NULL,
+									  visit_server_date DATE NOT NULL,
+									  idaction INTEGER NOT NULL REFERENCES {$prefixTables}log_action DEFERRABLE INITIALLY DEFERRED,
+									  idlink_va INTEGER NOT NULL,
+									  referer_idvisit INTEGER DEFAULT NULL CHECK (referer_idvisit >= 0),
+									  referer_visit_server_date DATE DEFAULT NULL,
+									  referer_type INTEGER DEFAULT NULL CHECK (referer_type >= 0),
+									  referer_name TEXT DEFAULT NULL,
+									  referer_keyword TEXT DEFAULT NULL,
+									  visitor_returning INTEGER NOT NULL,
+									  location_country TEXT NOT NULL,
+									  location_continent TEXT NOT NULL,
+									  url TEXT NOT NULL,
+									  idgoal INTEGER NOT NULL CHECK (idgoal >= 0),
+									  revenue FLOAT DEFAULT NULL,
+									  PRIMARY KEY  (idvisit,idgoal)
+									)
+			",
+
+			'log_profiling' => "CREATE TABLE {$prefixTables}log_profiling (
+								  query TEXT NOT NULL UNIQUE,
+								  count INTEGER  NULL CHECK (count >= 0),
+								  sum_time_ms FLOAT NULL
+								)
+			",
+			
+			'option' => "CREATE TABLE {$prefixTables}option (
+								option_name TEXT NOT NULL PRIMARY KEY,
+								option_value TEXT NOT NULL ,
+								autoload INTEGER NOT NULL DEFAULT 1
+								)
+			",
+				# FIXME idsite NULL ?
 			'archive_numeric'	=> "CREATE TABLE {$prefixTables}archive_numeric (
-									  idarchive INTEGER UNSIGNED NOT NULL,
-									  name VARCHAR(255) NOT NULL,
-									  idsite INTEGER UNSIGNED NULL,
+									  idarchive INTEGER  NOT NULL CHECK (idarchive >= 0),
+									  name TEXT NOT NULL,
+									  idsite INTEGER  NULL CHECK (idsite >= 0),
 									  date1 DATE NULL,
 								  	  date2 DATE NULL,
-									  period TINYINT UNSIGNED NULL,
-								  	  ts_archived DATETIME NULL,
+									  period INTEGER NULL CHECK (period >= 0),
+									  ts_archived TIMESTAMP WITH TIME ZONE NULL,
 								  	  value FLOAT NULL,
-									  PRIMARY KEY(idarchive, name),
-									  KEY `index_all` (`idsite`,`date1`,`date2`,`name`,`ts_archived`)
-									)  DEFAULT CHARSET=utf8 
+									  PRIMARY KEY(idarchive, name)
+									)
 			",
+						# FIXME idsite NULL ?
 			'archive_blob'	=> "CREATE TABLE {$prefixTables}archive_blob (
-									  idarchive INTEGER UNSIGNED NOT NULL,
-									  name VARCHAR(255) NOT NULL,
-									  idsite INTEGER UNSIGNED NULL,
+									  idarchive INTEGER  NOT NULL CHECK (idarchive >= 0),
+									  name TEXT NOT NULL,
+									  idsite INTEGER  NULL CHECK (idsite >= 0),
 									  date1 DATE NULL,
 									  date2 DATE NULL,
-									  period TINYINT UNSIGNED NULL,
-									  ts_archived DATETIME NULL,
-									  value MEDIUMBLOB NULL,
-									  PRIMARY KEY(idarchive, name),
-									  KEY `index_all` (`idsite`,`date1`,`date2`,`name`,`ts_archived`)
-									)  DEFAULT CHARSET=utf8 
-			",
+									  period INTEGER NULL CHECK (period >= 0),
+									  ts_archived TIMESTAMP WITH TIME ZONE NULL,
+									  value TEXT NULL,
+									  PRIMARY KEY(idarchive, name)
+									)			",
+		);
+		return $tables;
+	}
+# FIXME pgsql merge functions
+	static public function getIndexCreateSql( $indexName )
+	{
+		$index = Piwik::getIndexesCreateSql();
+
+		if(!isset($index[$indexName]))
+		{
+			throw new Exception("The index '$indexName' SQL creation code couldn't be found.");
+		}
+
+		return $index[$indexName];
+	}
+
+	static public function getIndexesCreateSql()
+	{
+		$config = Zend_Registry::get('config');
+		$prefixTables = $config->database->tables_prefix;
+		$tables = array(
+			'log_action_index' => "CREATE INDEX {$prefixTables}log_action_index ON {$prefixTables}log_action(type, name)",
+			'log_visit_index' => "CREATE INDEX {$prefixTables}log_visit_index ON {$prefixTables}log_visit(idsite, visit_server_date)",
+			'log_link_visit_action_index' => "CREATE INDEX {$prefixTables}log_link_visit_action_index ON {$prefixTables}log_link_visit_action(idvisit)",
+			'log_conversion_index' => "CREATE INDEX {$prefixTables}log_conversion_index ON {$prefixTables}log_conversion(idsite,visit_server_date)",
+			'archive_numeric_index' => "CREATE INDEX {$prefixTables}archive_numeric_index ON {$prefixTables}archive_numeric(idsite,date1,date2,name,ts_archived)",
+			'archive_blob_index' => "CREATE INDEX {$prefixTables}archive_blob_index ON {$prefixTables}archive_blob(idsite,date1,date2,name,ts_archived)"
 		);
 		return $tables;
 	}
@@ -1117,7 +1125,7 @@ class Piwik
 			$config = Zend_Registry::get('config');
 			$prefixTables = $config->database->tables_prefix;
 			
-			$allTables = $db->fetchCol("SHOW TABLES");
+			$allTables = $db->listTables();
 			
 			// all the tables to be installed
 			$allMyTables = self::getTablesNames();
@@ -1126,16 +1134,26 @@ class Piwik
 			$tablesInstalled = array_intersect($allMyTables, $allTables);
 			
 			// at this point we have only the piwik tables which is good
-			// but we still miss the piwik generated tables (using the class Piwik_TablePartitioning)`
+			// but we still miss the piwik generated tables (using the class Piwik_TablePartitioning)
 			$idSiteInSql = "no";
 			if(!is_null($idSite))
 			{
 				$idSiteInSql = $idSite;
 			}
+			$sql = "SELECT c.relname  AS table_name "
+				. "FROM pg_catalog.pg_class c "
+				. "JOIN pg_catalog.pg_roles r ON r.oid = c.relowner "
+				. "LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace "
+				. "WHERE n.nspname <> 'pg_catalog' "
+				. "AND n.nspname !~ '^pg_toast' "
+				. "AND pg_catalog.pg_table_is_visible(c.oid) "
+				. "AND c.relkind = 'r' "
+				. "AND c.relname "
+				. " LIKE ";
 			$allArchiveNumeric = $db->fetchCol("/* SHARDING_ID_SITE = ".$idSiteInSql." */ 
-												SHOW TABLES LIKE '".$prefixTables."archive_numeric%'");
+												$sql '".$prefixTables."archive_numeric%'");
 			$allArchiveBlob = $db->fetchCol("/* SHARDING_ID_SITE = ".$idSiteInSql." */ 
-												SHOW TABLES LIKE '".$prefixTables."archive_blob%'");
+												$sql '".$prefixTables."archive_blob%'");
 					
 			$allTablesReallyInstalled = array_merge($tablesInstalled, $allArchiveNumeric, $allArchiveBlob);
 			
@@ -1150,7 +1168,8 @@ class Piwik
 		{
 			$dbName = Zend_Registry::get('config')->database->dbname;
 		}
-		Zend_Registry::get('db')->query("CREATE DATABASE IF NOT EXISTS ".$dbName);
+		Zend_Registry::get('db')->query("DROP DATABASE IF EXISTS ".$dbName);
+		Zend_Registry::get('db')->query("CREATE DATABASE ".$dbName);
 	}
 	
 	static public function dropTestDatabase()
@@ -1169,16 +1188,15 @@ class Piwik
 		}
 		
 		$dbInfos['profiler'] = $config->Debug->enable_sql_profiler;
-		
+		# the following to prevent error with zend 
+		unset ($dbInfos['tables_prefix']);
+		unset ($dbInfos['adapter']);
 		$db = null;
 		Piwik_PostEvent('Reporting.createDatabase', $db);
 		if(is_null($db))
 		{
 			$db = Zend_Db::factory($config->database->adapter, $dbInfos);
 			$db->getConnection();
-			// see http://framework.zend.com/issues/browse/ZF-1398
-			$db->getConnection()->setAttribute(PDO::ATTR_EMULATE_PREPARES, true);
-			$db->getConnection()->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, true);		
 			Zend_Db_Table::setDefaultAdapter($db);
 			$db->resetConfigArray(); // we don't want this information to appear in the logs
 		}
@@ -1190,9 +1208,9 @@ class Piwik
 		Zend_Registry::get('db')->closeConnection();
 	}
 	
-	static public function getMysqlVersion()
+	static public function getSqlVersion()
 	{
-		return Zend_Registry::get('db')->fetchOne("SELECT VERSION()");
+		return Zend_Registry::get('db')->fetchOne("show server_version");
 	}
 
 	static public function createLogObject()
@@ -1279,7 +1297,7 @@ class Piwik
 					)
 				)
 			{
-				$db->query("DROP TABLE `$tableName`");
+				$db->query("DROP TABLE $tableName cascade");
 			}
 		}			
 	}
@@ -1317,9 +1335,12 @@ class Piwik
 
 		$tablesAlreadyInstalled = self::getTablesInstalled();
 		$tablesToCreate = self::getTablesCreateSql();
+		$indexToCreate = self::getIndexesCreateSql();
 		unset($tablesToCreate['archive_blob']);
 		unset($tablesToCreate['archive_numeric']);
-
+		unset($indexToCreate['archive_blob_index']);
+		unset($indexToCreate['archive_numeric_index']);
+		$db->query( "begin;" );
 		foreach($tablesToCreate as $tableName => $tableSql)
 		{
 			$tableName = $prefixTables . $tableName;
@@ -1328,6 +1349,15 @@ class Piwik
 				$db->query( $tableSql );
 			}
 		}
+		foreach($indexToCreate as $indexName => $indexSql)
+		{
+			$indexName = $prefixTables . $indexName;
+			if(!in_array($indexName, $tablesAlreadyInstalled))
+			{
+				$db->query( $indexSql );
+			}
+		}
+		$db->query( "commit;" );
 	}
 	
 	static public function install()
diff --git a/core/TablePartitioning.php b/core/TablePartitioning.php
index a382092..0a93d88 100644
--- a/core/TablePartitioning.php
+++ b/core/TablePartitioning.php
@@ -74,10 +74,15 @@ abstract class Piwik_TablePartitioning
 		if(!in_array($this->generatedTableName, self::$tablesAlreadyInstalled))
 		{
 			$db = Zend_Registry::get('db');
-			$sql = Piwik::getTableCreateSql($this->tableName);
-			
 			$config = Zend_Registry::get('config');
 			$prefixTables = $config->database->tables_prefix;
+
+			$sql = Piwik::getTableCreateSql($this->tableName);
+			$sql = str_replace( $prefixTables . $this->tableName, $this->generatedTableName, $sql);
+			$sql = "/* SHARDING_ID_SITE = ".$this->idSite." */ ".$sql;
+			$db->query( $sql );
+
+			$sql = Piwik::getIndexCreateSql($this->tableName.'_index');
 			$sql = str_replace( $prefixTables . $this->tableName, $this->generatedTableName, $sql);
 			$sql = "/* SHARDING_ID_SITE = ".$this->idSite." */ ".$sql;
 			$db->query( $sql );
diff --git a/core/Tracker/Action.php b/core/Tracker/Action.php
index f613f77..b1ed397 100644
--- a/core/Tracker/Action.php
+++ b/core/Tracker/Action.php
@@ -172,9 +172,13 @@ class Piwik_Tracker_Action implements Piwik_Tracker_Action_Interface
 	 */
 	 public function record( $idVisit, $idRefererAction, $timeSpentRefererAction)
 	 {
+		$actionId = $this->getIdAction();
+		if (empty($actionId)) {
+			$actionId = 0;
+		}
 	 	Piwik_Tracker::getDatabase()->query("/* SHARDING_ID_SITE = ".$this->idSite." */ INSERT INTO ".Piwik_Common::prefixTable('log_link_visit_action')
 						." (idvisit, idaction, idaction_ref, time_spent_ref_action) VALUES (?,?,?,?)",
-					array($idVisit, $this->getIdAction(), $idRefererAction, $timeSpentRefererAction)
+					array($idVisit, $actionId, $idRefererAction, $timeSpentRefererAction)
 					);
 		
 		$this->idLinkVisitAction = Piwik_Tracker::getDatabase()->lastInsertId(); 
diff --git a/core/Tracker/Db.php b/core/Tracker/Db.php
index 93ea192..8104531 100644
--- a/core/Tracker/Db.php
+++ b/core/Tracker/Db.php
@@ -29,15 +29,12 @@ class Piwik_Tracker_Db
 	/**
 	 * Builds the DB object
 	 */
-	public function __construct( $host, $username, $password, $dbname, $port, $driverName = 'mysql') 
+	public function __construct( $host, $username, $password, $dbname, $port, $driverName = 'pgsql')
 	{
-		if($host[0] == '/')
+		$this->dsn = $driverName.":dbname=$dbname port=$port user=$username password=$password";
+		if($host[0] != '/')
 		{
-			$this->dsn = $driverName.":dbname=$dbname;unix_socket=$host";
-		}
-		else
-		{
-			$this->dsn = $driverName.":dbname=$dbname;host=$host;port=$port";
+			$this->dsn .= " host=$host";
 		}
 		$this->username = $username;
 		$this->password = $password;
@@ -253,14 +250,18 @@ class Piwik_Tracker_Db
 		
 		foreach($this->queriesProfiling as $query => $info)
 		{
-			$time = $info['sum_time_ms'];
+			$time = round($info['sum_time_ms']);
 			$count = $info['count'];
 
+			$queryProfiling = "UPDATE ".Piwik_Common::prefixTable('log_profiling')."
+					SET count=count+?, sum_time_ms=sum_time_ms+?
+					WHERE query=?";
+			if (!$this->query($queryProfiling,array($count,$time,$query))) {
 			$queryProfiling = "INSERT INTO ".Piwik_Common::prefixTable('log_profiling')."
-						(query,count,sum_time_ms) VALUES (?,$count,$time)
-						ON DUPLICATE KEY 
-							UPDATE count=count+$count,sum_time_ms=sum_time_ms+$time";
-			$this->query($queryProfiling,array($query));
+							(count,sum_time_ms,query) VALUES (?,?,?)";
+				$this->query($queryProfiling,array($count,$time,$query));
+			}
+
 		}
 		
 		// turn back on profiling
diff --git a/core/Tracker/Visit.php b/core/Tracker/Visit.php
index bb34e58..5d54f70 100644
--- a/core/Tracker/Visit.php
+++ b/core/Tracker/Visit.php
@@ -162,6 +162,9 @@ class Piwik_Tracker_Visit implements Piwik_Tracker_Visit_Interface
 			|| !$isLastActionInTheSameVisit)
 		{
 			$this->handleNewVisit($actionId, $someGoalsConverted);
+			if (empty($this->visitorInfo['idvisit'])) {
+				$this->visitorInfo['idvisit'] = 0;
+			}
 			$action->record( $this->visitorInfo['idvisit'], 0, 0 );
 		}
 		
@@ -198,6 +201,9 @@ class Piwik_Tracker_Visit implements Piwik_Tracker_Visit_Interface
 			$sqlUpdateGoalConverted = " visit_goal_converted = 1,";
 		}
 		
+		if (empty($actionId)) {
+			$actionId = 0;
+		}
 		$statement = Piwik_Tracker::getDatabase()->query("/* SHARDING_ID_SITE = ". $this->idsite ." */
 							UPDATE ". Piwik_Common::prefixTable('log_visit')." 
 							SET visit_last_action_time = ?,
@@ -206,8 +212,7 @@ class Piwik_Tracker_Visit implements Piwik_Tracker_Visit_Interface
 								$sqlUpdateGoalConverted
 								visit_total_time = UNIX_TIMESTAMP(visit_last_action_time) - UNIX_TIMESTAMP(visit_first_action_time)
 							WHERE idvisit = ?
-								AND visitor_idcookie = ?
-							LIMIT 1",
+								AND visitor_idcookie = ?",
 							array( 	$datetimeServer,
 									$actionId,
 									$this->visitorInfo['idvisit'],
@@ -255,6 +260,9 @@ class Piwik_Tracker_Visit implements Piwik_Tracker_Visit_Interface
 		/**
 		 * Save the visitor
 		 */
+		if (empty($actionId)) {
+			$actionId = 0;
+		}
 		$this->visitorInfo = array(
 			'idsite' 				=> $this->idsite,
 			'visitor_localtime' 	=> $localTime,
@@ -516,9 +524,9 @@ class Piwik_Tracker_Visit implements Piwik_Tracker_Visit_Interface
 		$userAgent		= Piwik_Common::sanitizeInputValues(@$_SERVER['HTTP_USER_AGENT']);
 		$aBrowserInfo	= UserAgentParser::getBrowser($userAgent);
 		
-		$browserName	= ($aBrowserInfo !== false && $aBrowserInfo['id'] !== false) ? $aBrowserInfo['id'] : 'UNK';
-		$browserVersion	= ($aBrowserInfo !== false && $aBrowserInfo['version'] !== false) ? $aBrowserInfo['version'] : '';
-		
+		# the !==false does not match the NULL and we have NOT NULL in the colums, so change to !empty.
+		$browserName	= (!empty($aBrowserInfo) && !empty($aBrowserInfo['id'])) ? $aBrowserInfo['id'] : 'UNK';
+		$browserVersion	= (!empty($aBrowserInfo) && !empty($aBrowserInfo['version'])) ? $aBrowserInfo['version'] : '';
 		$os				= UserAgentParser::getOperatingSystem($userAgent);
 		$os				= $os === false ? 'UNK' : $os['id'];
 		
diff --git a/core/Updates/0.2.32.php b/core/Updates/0.2.32.php
deleted file mode 100644
index 2b62572..0000000
--- a/core/Updates/0.2.32.php
+++ /dev/null
@@ -1,12 +0,0 @@
-<?php
-// login field now consistenly restricted to maximum 100 length
-$tablesToAlter = array(
-	'user_language',
-	'access',
-	'user',
-	'user_dashboard',
-);
-foreach($tablesToAlter as $table) {
-	Piwik_Query("ALTER TABLE ". Piwik::prefixTable($table) . " 
-				CHANGE `login` `login` VARCHAR( 100 ) NOT NULL");
-}
diff --git a/lang/en.php b/lang/en.php
index 48dc001..acef287 100644
--- a/lang/en.php
+++ b/lang/en.php
@@ -582,7 +582,9 @@ $translations = array(
 	'Installation_PercentDone' => '%s %% Done',
 	'Installation_NoConfigFound' => 'The Piwik configuration file couldn\'t be found and you are trying to access a Piwik page.<br /><b>&nbsp;&nbsp;&raquo; You can <a href=\'index.php\'>install Piwik now</a></b><br /><small>If you installed Piwik before and have some tables in your DB, don\'t worry, you can reuse the same tables and keep your existing data!</small>',
 	'Installation_MysqlSetup' => 'Mysql database setup',
+	'Installation_PgSqlSetup' => 'PgSql database setup',
 	'Installation_MysqlErrorConnect' => 'Error while trying to connect to the Mysql database',
+	'Installation_PgSqlErrorConnect' => 'Error while trying to connect to the Postgresql Server',
 	'Installation_JsTag' => 'Javascript tag',
 	'Installation_JsTagHelp' => '<p>To count all visitors, you must insert the javascript code on all of your pages.</p><p>Your pages do not have to be made with PHP, Piwik will work on all kinds of pages (whether it is HTML, ASP, Perl or any other languages).</p><p>Here is the code you have to insert: (copy and paste on all your pages) </p>',
 	'Installation_Congratulations' => 'Congratulations',
@@ -604,6 +606,7 @@ $translations = array(
 	'Installation_SystemCheckPhp' => 'PHP version',
 	'Installation_SystemCheckPdo' => 'Pdo extension',
 	'Installation_SystemCheckPdoMysql' => 'Pdo_Mysql extension',
+	'Installation_SystemCheckPdoPgSql' => 'Pdo_PgSql extension',
 	'Installation_SystemCheckPdoError' => 'You need to enable the PDO and PDO_MYSQL extensions in your php.ini file.',
 	'Installation_SystemCheckPdoHelp' => 'On a windows server you can add the following lines in your php.ini %s <br /><br />On a Linux server you can compile php with the following option %s In your php.ini, add the following lines %s<br /><br />More information on the <a style="color:red" href="http://php.net/pdo">PHP website</a>.',
 	'Installation_SystemCheckWriteDirs' => 'Directories with write access',
diff --git a/libs/Zend/Db/Adapter/Pdo/Pgsql.php b/libs/Zend/Db/Adapter/Pdo/Pgsql.php
index 75546f7..5b8e8c9 100755
--- a/libs/Zend/Db/Adapter/Pdo/Pgsql.php
+++ b/libs/Zend/Db/Adapter/Pdo/Pgsql.php
@@ -56,17 +56,13 @@ class Zend_Db_Adapter_Pdo_Pgsql extends Zend_Db_Adapter_Pdo_Abstract
     {
         // @todo use a better query with joins instead of subqueries
         $sql = "SELECT c.relname AS table_name "
-             . "FROM pg_class c, pg_user u "
-             . "WHERE c.relowner = u.usesysid AND c.relkind = 'r' "
-             . "AND NOT EXISTS (SELECT 1 FROM pg_views WHERE viewname = c.relname) "
-             . "AND c.relname !~ '^(pg_|sql_)' "
-             . "UNION "
-             . "SELECT c.relname AS table_name "
-             . "FROM pg_class c "
-             . "WHERE c.relkind = 'r' "
-             . "AND NOT EXISTS (SELECT 1 FROM pg_views WHERE viewname = c.relname) "
-             . "AND NOT EXISTS (SELECT 1 FROM pg_user WHERE usesysid = c.relowner) "
-             . "AND c.relname !~ '^pg_'";
+             . "FROM pg_catalog.pg_class c "
+             . "JOIN pg_catalog.pg_roles r ON r.oid = c.relowner "
+             . "LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace "
+             . "WHERE n.nspname <> 'pg_catalog' "
+             . "AND n.nspname !~ '^pg_toast' "
+             . "AND pg_catalog.pg_table_is_visible(c.oid) "
+             . "AND c.relkind = 'r' ";
 
         return $this->fetchCol($sql);
     }
diff --git a/misc/PDO_PGSQL.sql b/misc/PDO_PGSQL.sql
new file mode 100644
index 0000000..cfd05a7
--- /dev/null
+++ b/misc/PDO_PGSQL.sql
@@ -0,0 +1,40 @@
+-- createuser -S -D -R -P piwik_user # create postgresql user 
+CREATE DATABASE piwik WITH TEMPLATE = template0 ENCODING = 'UTF8';
+ALTER DATABASE piwik OWNER TO piwik_user;
+
+CREATE OR REPLACE FUNCTION hour(time with time zone) RETURNS integer AS '
+ SELECT
+ EXTRACT (HOUR FROM $1)::int4 AS result;
+ ' LANGUAGE 'SQL';
+
+CREATE OR REPLACE FUNCTION hour(timestamp with time zone) RETURNS integer AS '
+ SELECT
+ EXTRACT (HOUR FROM $1)::int4 AS result;
+ ' LANGUAGE 'SQL';
+
+CREATE OR REPLACE FUNCTION unix_timestamp(timestamp with time zone) RETURNS integer AS '
+ SELECT
+ ROUND(EXTRACT( EPOCH FROM ABSTIME($1) ))::int4 AS result;
+ ' LANGUAGE 'SQL';
+
+CREATE OR REPLACE FUNCTION current_date() RETURNS date AS '
+ SELECT CURRENT_DATE AS result;
+ ' LANGUAGE 'SQL';
+
+CREATE OR REPLACE FUNCTION concat(text,text,text,text,text) RETURNS text AS '
+ $1 || $2 || $3 || $4 || $5
+ ' LANGUAGE 'SQL';
+
+CREATE OR REPLACE FUNCTION concat(text,text,text,text) RETURNS text AS '
+ $1 || $2 || $3 || $4
+ ' LANGUAGE 'SQL';
+
+CREATE OR REPLACE FUNCTION concat(text,text,text) RETURNS text AS '
+ $1 || $2 || $3
+ ' LANGUAGE 'SQL';
+
+CREATE OR REPLACE FUNCTION concat(text,text) RETURNS text AS '
+ $1 || $2
+ ' LANGUAGE 'SQL';
+
+CREATE SEQUENCE idarchive_seq;
diff --git a/misc/generateVisits.php b/misc/generateVisits.php
index 09f7bb3..4af5dee 100644
--- a/misc/generateVisits.php
+++ b/misc/generateVisits.php
@@ -77,7 +77,6 @@ while($startTime <= time())
 	$visitors = rand($minVisitors, $maxVisitors);
 	$actions = $nbActions;
 	$generator->setTimestampToUse($startTime);
-	
 	$nbActionsTotalThisDay = $generator->generate($visitors, $actions);
 	$actionsPerVisit = round($nbActionsTotalThisDay / $visitors);
 	print("Generated $visitors unique visitors and $actionsPerVisit actions per visit for the ".date("Y-m-d", $startTime)."<br>\n");
diff --git a/piwik.php b/piwik.php
index 998758d..0c020da 100644
--- a/piwik.php
+++ b/piwik.php
@@ -34,7 +34,6 @@ require_once "Tracker/Db.php";
 require_once "Tracker/Visit.php";
 require_once "Tracker/GoalManager.php";
 
-
 ob_start();
 if($GLOBALS['DEBUGPIWIK'] === true)
 {	
diff --git a/plugins/Actions/Actions.php b/plugins/Actions/Actions.php
index 20f1f31..4cf20fa 100644
--- a/plugins/Actions/Actions.php
+++ b/plugins/Actions/Actions.php
@@ -113,13 +113,14 @@ class Piwik_Actions extends Piwik_Plugin
 							type,
 							count(distinct t1.idvisit) as nb_visits, 
 							count(distinct visitor_idcookie) as nb_uniq_visitors,
-							count(*) as nb_hits							
+							count(*) as nb_hits,
+							t3.idaction
 					FROM (".$archiveProcessing->logTable." as t1
 						LEFT JOIN ".$archiveProcessing->logVisitActionTable." as t2 USING (idvisit))
 							LEFT JOIN ".$archiveProcessing->logActionTable." as t3 USING (idaction)
 					WHERE visit_server_date = ?
 						AND idsite = ?
-					GROUP BY t3.idaction
+					GROUP BY t3.idaction,name,type
 					ORDER BY nb_hits DESC";
 		$query = $archiveProcessing->db->query($query, array( $archiveProcessing->strDateStart, $archiveProcessing->idsite ));
 		$modified = $this->updateActionsTableWithRowQuery($query);
@@ -139,7 +140,7 @@ class Piwik_Actions extends Piwik_Plugin
 						JOIN ".$archiveProcessing->logActionTable." ON (visit_entry_idaction = idaction)
 					WHERE visit_server_date = ?
 						AND idsite = ?
-					GROUP BY visit_entry_idaction
+					GROUP BY visit_entry_idaction,name,type
 					";
 		$query = $archiveProcessing->db->query($query, array( $archiveProcessing->strDateStart, $archiveProcessing->idsite ));
 		$modified = $this->updateActionsTableWithRowQuery($query);
@@ -157,7 +158,7 @@ class Piwik_Actions extends Piwik_Plugin
 						JOIN ".$archiveProcessing->logActionTable." ON (visit_exit_idaction = idaction)
 				 	WHERE visit_server_date = ?
 				 		AND idsite = ?
-				 	GROUP BY visit_exit_idaction
+						GROUP BY visit_exit_idaction,name,type
 					";
 		$query = $archiveProcessing->db->query($query, array( $archiveProcessing->strDateStart, $archiveProcessing->idsite ));
 		$modified = $this->updateActionsTableWithRowQuery($query);
@@ -173,7 +174,7 @@ class Piwik_Actions extends Piwik_Plugin
 							JOIN ".$archiveProcessing->logActionTable."  log_action ON (log_action.idaction = log_link_visit_action.idaction_ref)				 	
 					WHERE visit_server_date = ?
 				 		AND idsite = ?
-				 	GROUP BY idaction_ref
+					GROUP BY idaction_ref,name,type
 				";
 		$query = $archiveProcessing->db->query($query, array( $archiveProcessing->strDateStart, $archiveProcessing->idsite ));
 		$modified = $this->updateActionsTableWithRowQuery($query);
diff --git a/plugins/CoreUpdater/CoreUpdater.php b/plugins/CoreUpdater/CoreUpdater.php
index bb8b432..829e0ed 100644
--- a/plugins/CoreUpdater/CoreUpdater.php
+++ b/plugins/CoreUpdater/CoreUpdater.php
@@ -18,7 +18,7 @@ class Piwik_CoreUpdater extends Piwik_Plugin
 			'description' => 'Piwik updating mechanism',
 			'author' => 'Piwik',
 			'homepage' => 'http://piwik.org/',
-			'version' => '0.1',
+			'version' => '0.2.28',
 		);
 	}
 }
diff --git a/plugins/DBStats/API.php b/plugins/DBStats/API.php
index 5c26a67..1e8fcf3 100644
--- a/plugins/DBStats/API.php
+++ b/plugins/DBStats/API.php
@@ -37,7 +37,7 @@ class Piwik_DBStats_API
 			// before 0.2.4 there is no port specified in config file
 			$configDb['port'] = '3306';  
 		}
-
+# FIXME add an sql fonction to postgresql to fetch something similar (the hit/miss ratio, bloat, toast ...)
 		$link   = mysql_connect($configDb['host'], $configDb['username'], $configDb['password']);
 		$status = mysql_stat($link);
 		mysql_close($link);
@@ -48,6 +48,7 @@ class Piwik_DBStats_API
 	{
 		Piwik::checkUserIsSuperUser();
 		$db = Zend_Registry::get('db');
+		#FIXME pgsql
 		// http://dev.mysql.com/doc/refman/5.1/en/show-table-status.html
 		$tables = $db->fetchAll("SHOW TABLE STATUS LIKE ?", $table);
 
@@ -65,6 +66,7 @@ class Piwik_DBStats_API
 	{
 		Piwik::checkUserIsSuperUser();
 		$db = Zend_Registry::get('db');
+		#FIXME pgsql
 		// http://dev.mysql.com/doc/refman/5.1/en/show-table-status.html
 		$tablesPiwik =  Piwik::getTablesInstalled();
 		$total = array('Name' => 'Total', 'Data_length' => 0, 'Index_length' => 0, 'Rows' => 0);
diff --git a/plugins/Dashboard/Controller.php b/plugins/Dashboard/Controller.php
index cf6aa2c..2306425 100644
--- a/plugins/Dashboard/Controller.php
+++ b/plugins/Dashboard/Controller.php
@@ -49,13 +49,17 @@ class Piwik_Dashboard_Controller extends Piwik_Controller
 	 */
 	protected function saveLayoutForUser( $login, $idDashboard, $layout)
 	{
-		$paramsBind = array($login, $idDashboard, $layout, $layout);
-		Piwik_Query('INSERT INTO '.Piwik::prefixTable('user_dashboard') .
-					' (login, iddashboard, layout)
-						VALUES (?,?,?)
-					ON DUPLICATE KEY UPDATE layout=?',
-					$paramsBind);
+		$paramsBind = array($layout, $login, $idDashboard);
+		$query = 'UPDATE '.Piwik::prefixTable('user_dashboard').'
+				SET layout = ?
+				WHERE login = ? AND iddashboard = ?';
+		if (!Piwik_Query($query,$paramsBind)) {
+			$query = 'INSERT INTO '.Piwik::prefixTable('user_dashboard') .
+				' (layout, login, iddashboard) VALUES (?,?,?)';
+			Piwik_Query($query,$paramsBind);
 	}
+	}
+
 	
 	/**
 	 * Returns the layout in the DB for the given user, or false if the layout has not been set yet.
diff --git a/plugins/Dashboard/Dashboard.php b/plugins/Dashboard/Dashboard.php
index 95162bb..d3f3200 100644
--- a/plugins/Dashboard/Dashboard.php
+++ b/plugins/Dashboard/Dashboard.php
@@ -48,13 +48,14 @@ class Piwik_Dashboard extends Piwik_Plugin
 		// we catch the exception
 		try{
 			$sql = "CREATE TABLE ". Piwik::prefixTable('user_dashboard')." (
-					login VARCHAR( 20 ) NOT NULL ,
+					login TEXT NOT NULL REFERENCES ".Piwik::prefixTable('user')." DEFERRABLE INITIALLY DEFERRED,
 					iddashboard INT NOT NULL ,
 					layout TEXT NOT NULL,
 					PRIMARY KEY ( login , iddashboard )
 					)  DEFAULT CHARSET=utf8 " ;
 			Piwik_Query($sql);
 		} catch(Zend_Db_Statement_Exception $e){
+			# FIXME pgsql
 			// mysql code error 1050:table already exists
 			// see bug #153 http://dev.piwik.org/trac/ticket/153
 			if(ereg('1050',$e->getMessage()))
diff --git a/plugins/ExampleFeedburner/ExampleFeedburner.php b/plugins/ExampleFeedburner/ExampleFeedburner.php
index 7a50ec5..d663df8 100644
--- a/plugins/ExampleFeedburner/ExampleFeedburner.php
+++ b/plugins/ExampleFeedburner/ExampleFeedburner.php
@@ -16,8 +16,9 @@ class Piwik_ExampleFeedburner extends Piwik_Plugin
 	function install()
 	{
 		try{
-			Piwik_Query('ALTER TABLE '.Piwik::prefixTable('site'). " ADD `feedburnerName` VARCHAR( 100 ) DEFAULT NULL");
+			Piwik_Query('ALTER TABLE '.Piwik::prefixTable('site'). " ADD feedburnerName TEXT DEFAULT NULL");
 		} catch(Zend_Db_Statement_Exception $e){
+			# FIXME pgsql
 			// mysql code error 1060: column already exists
 			// if there is another error we throw the exception, otherwise it is OK as we are simply reinstalling the plugin
 			if(!ereg('1060',$e->getMessage()))
@@ -29,7 +30,7 @@ class Piwik_ExampleFeedburner extends Piwik_Plugin
 	
 	function uninstall()
 	{
-		Piwik_Query('ALTER TABLE '.Piwik::prefixTable('site'). " DROP `feedburnerName`");
+		Piwik_Query('ALTER TABLE '.Piwik::prefixTable('site'). " DROP feedburnerName");
 	}
 }
 
diff --git a/plugins/Installation/Controller.php b/plugins/Installation/Controller.php
index acb39c1..b6231b6 100644
--- a/plugins/Installation/Controller.php
+++ b/plugins/Installation/Controller.php
@@ -85,8 +85,7 @@ class Piwik_Installation_Controller extends Piwik_Controller
 		$view->showNextStep = !$view->problemWithSomeDirectories 
 							&& $view->infos['phpVersion_ok']
 							&& $view->infos['pdo_ok']
-							&& $view->infos['pdo_mysql_ok']
-
+							&& $view->infos['pdo_pgsql_ok']
 						;
 		$_SESSION['currentStepDone'] = __FUNCTION__;		
 
@@ -135,22 +134,21 @@ class Piwik_Installation_Controller extends Piwik_Controller
 				try {
 					Piwik::createDatabaseObject($dbInfos);
 				} catch (Zend_Db_Adapter_Exception $e) {
+# FIXME pgsql
 					// database not found, we try to create  it
 					if(ereg('[1049]',$e->getMessage() ))
 					{
 						$dbInfosConnectOnly = $dbInfos;
-						$dbInfosConnectOnly['dbname'] = null;
+// 						$dbInfosConnectOnly['dbname'] = null;
 						Piwik::createDatabaseObject($dbInfosConnectOnly);
 						Piwik::createDatabase($dbInfos['dbname']);
 						$_SESSION['databaseCreated'] = true;
 					}
 				}
-				
-				$mysqlVersion = Piwik::getMysqlVersion();
-				$minimumMysqlVersion = Zend_Registry::get('config')->General->minimum_mysql_version;
-				if(version_compare($mysqlVersion, $minimumMysqlVersion) === -1) 
-				{
-					throw new Exception(vsprintf("Your MySQL version is %s but Piwik requires at least %s.", array($mysqlVersion, $minimumMysqlVersion)));
+				$sqlVersion = Piwik::getSqlVersion();
+				$minimumPgsqlVersion = Zend_Registry::get('config')->General->minimum_pgsql_version;
+				if (version_compare($sqlVersion, $minimumPgsqlVersion) === -1) {
+					throw new Exception(vsprintf("Your PostgreSQL version is %s but Piwik requires at least %s.", array($sqlVersion, $minimumPgsqlVersion)));
 				}
 				
 				$_SESSION['db_infos'] = $dbInfos;
@@ -479,10 +477,10 @@ class Piwik_Installation_Controller extends Piwik_Controller
 		    $infos['pdo_ok'] = true;
 		}
 				
-		$infos['pdo_mysql_ok'] = false;
-		if (in_array('pdo_mysql', $extensions))  
+		$infos['pdo_pgsql_ok'] = false;
+		if (in_array('pdo_pgsql', $extensions))
 		{
-		    $infos['pdo_mysql_ok'] = true;
+		    $infos['pdo_pgsql_ok'] = true;
 		}
 		
 		$infos['gd_ok'] = false;
diff --git a/plugins/Installation/FormDatabaseSetup.php b/plugins/Installation/FormDatabaseSetup.php
index 34a3046..4a8d871 100644
--- a/plugins/Installation/FormDatabaseSetup.php
+++ b/plugins/Installation/FormDatabaseSetup.php
@@ -20,7 +20,7 @@ class Piwik_Installation_FormDatabaseSetup extends Piwik_Form
 	function init()
 	{		
 		$formElements = array(
-			array('text', 'host', 'mysql server', 'value='.'localhost'),
+			array('text', 'host', 'postgresql server', 'value='.''),
 			array('text', 'username', 'login'),
 			array('password', 'password', 'password'),
 			array('text', 'dbname', 'database name'),
diff --git a/plugins/Installation/templates/databaseSetup.tpl b/plugins/Installation/templates/databaseSetup.tpl
index 9548735..570072c 100644
--- a/plugins/Installation/templates/databaseSetup.tpl
+++ b/plugins/Installation/templates/databaseSetup.tpl
@@ -1,9 +1,9 @@
-<h1>{'Installation_MysqlSetup'|translate}</h1>
+<h1>{'Installation_PgSqlSetup'|translate}</h1>
 
 {if isset($errorMessage)}
 	<div class="error">
 		<img src="themes/default/images/error_medium.png">
-		{'Installation_MysqlErrorConnect'|translate}:
+		{'Installation_PgSqlErrorConnect'|translate}:
 		<br />{$errorMessage}
 		
 	</div>
diff --git a/plugins/Installation/templates/systemCheck.tpl b/plugins/Installation/templates/systemCheck.tpl
index 84cd688..490d3cb 100644
--- a/plugins/Installation/templates/systemCheck.tpl
+++ b/plugins/Installation/templates/systemCheck.tpl
@@ -16,16 +16,16 @@
 		</td>
 	</tr>  
 	<tr>
-		<td class="label">{'Installation_SystemCheckPdoMysql'|translate}</td>
-		<td>{if $infos.pdo_mysql_ok}{$ok}
+		<td class="label">{'Installation_SystemCheckPdoPgSql'|translate}</td>
+		<td>{if $infos.pdo_pgsql_ok}{$ok}
 		{else}{$error}
 		{/if}
 		
-		{if !$infos.pdo_mysql_ok || !$infos.pdo_ok}
+		{if !$infos.pdo_pgsql_ok || !$infos.pdo_ok}
 			<p class="error" style="width:80%">{'Installation_SystemCheckPdoError'|translate}
 			<small>
 			<br /><br />
-			{'Installation_SystemCheckPdoHelp'|translate:"<br/><code>extension=php_pdo.dll</code><br /><code>extension=php_pdo_mysql.dll</code><br />":"<code>--with-pdo-mysql </code>":"<br/><code>extension=pdo.so</code><br /><code>extension=pdo_mysql.so</code><br />"}
+			{'Installation_SystemCheckPdoHelp'|translate:"<br/><code>extension=php_pdo.dll</code><br /><code>extension=php_pdo_pgsql.dll</code><br />":"<code>--with-pdo-pgsql </code>":"<br/><code>extension=pdo.so</code><br /><code>extension=pdo_pgsql.so</code><br />"}
 			</small>
 			</p>
 		{/if}
diff --git a/plugins/LanguagesManager/API.php b/plugins/LanguagesManager/API.php
index a867c40..fafdf46 100644
--- a/plugins/LanguagesManager/API.php
+++ b/plugins/LanguagesManager/API.php
@@ -118,5 +118,14 @@ class Piwik_LanguagesManager_API
 						VALUES (?,?)
 					ON DUPLICATE KEY UPDATE language=?',
 					$paramsBind);
+# FIXME pgsql
+// 			$queryProfiling = "UPDATE ".Piwik_Common::prefixTable('log_profiling')."
+// 					SET count=count+$count, sum_time_ms=sum_time_ms+$time
+// 					WHERE query=?";
+// 			if (!$this->query($queryProfiling,array($query))) {
+// 				$queryProfiling = "INSERT INTO ".Piwik_Common::prefixTable('log_profiling')."
+// 							(query,count,sum_time_ms) VALUES (?,$count,$time)";
+// 				$this->query($queryProfiling,array($query));
+// 			}
 	}
 }
diff --git a/plugins/LanguagesManager/LanguagesManager.php b/plugins/LanguagesManager/LanguagesManager.php
index 65f0a0d..ffc64b5 100644
--- a/plugins/LanguagesManager/LanguagesManager.php
+++ b/plugins/LanguagesManager/LanguagesManager.php
@@ -60,10 +60,10 @@ class Piwik_LanguagesManager extends Piwik_Plugin
 		// we catch the exception
 		try{
 			$sql = "CREATE TABLE ". Piwik::prefixTable('user_language')." (
-					login VARCHAR( 20 ) NOT NULL ,
-					language VARCHAR( 10 ) NOT NULL ,
-					PRIMARY KEY ( login )
-					)  DEFAULT CHARSET=utf8 " ;
+					login TEXT NOT NULL REFERENCES ".Piwik::prefixTable('user')." DEFERRABLE INITIALLY DEFERRED,
+					language TEXT NOT NULL ,
+					PRIMARY KEY ( login,language )
+					) " ;
 			Piwik_Query($sql);
 		} catch(Zend_Db_Statement_Exception $e){
 			// mysql code error 1050:table already exists
diff --git a/plugins/Provider/Provider.php b/plugins/Provider/Provider.php
index 5bbdfec..70eef14 100644
--- a/plugins/Provider/Provider.php
+++ b/plugins/Provider/Provider.php
@@ -40,11 +40,10 @@ class Piwik_Provider extends Piwik_Plugin
 		);
 		return $hooks;
 	}
-	
 	function install()
 	{
 		// add column hostname / hostname ext in the visit table
-		$query = "ALTER IGNORE TABLE `".Piwik::prefixTable('log_visit')."` ADD `location_provider` VARCHAR( 100 ) NULL";
+		$query = "ALTER TABLE ".Piwik::prefixTable('log_visit')." ADD location_provider TEXT NULL";
 		
 		// if the column already exist do not throw error. Could be installed twice...
 		try {
@@ -56,7 +55,7 @@ class Piwik_Provider extends Piwik_Plugin
 	function uninstall()
 	{
 		// add column hostname / hostname ext in the visit table
-		$query = "ALTER TABLE `".Piwik::prefixTable('log_visit')."` DROP `location_provider`";
+		$query = "ALTER TABLE ".Piwik::prefixTable('log_visit')." DROP location_provider";
 		Zend_Registry::get('db')->query($query);
 	}
 	
diff --git a/plugins/SitesManager/API.php b/plugins/SitesManager/API.php
index 5bf4167..78a24e3 100755
--- a/plugins/SitesManager/API.php
+++ b/plugins/SitesManager/API.php
@@ -231,13 +231,14 @@ class Piwik_SitesManager_API
 		$url = $urls[0];
 		$urls = array_slice($urls, 1);
 		
-		$db->insert(Piwik::prefixTable("site"), array(
-									'name' => $siteName,
-									'main_url' => $url,
-									)
+# FIXME pgsql add an exception if query fail
+                $idSite = $db->fetchOne("INSERT INTO ". Piwik_Common::prefixTable('site'). " ( name, main_url )
+                                                        VALUES (?,?) RETURNING idsite",
+                                                array($siteName, $url)
 								);
-									
-		$idSite = $db->lastInsertId();
+                if($idSite === false) {
+                       return false;
+                }
 		
 		self::insertSiteUrls($idSite, $urls);
 		
@@ -277,10 +278,10 @@ class Piwik_SitesManager_API
 		
 		$db = Zend_Registry::get('db');
 		
-		$db->query("DELETE FROM ".Piwik::prefixTable("site")." 
+		$db->query("DELETE FROM ".Piwik::prefixTable("site_url")." 
 					WHERE idsite = ?", $idSite);
 		
-		$db->query("DELETE FROM ".Piwik::prefixTable("site_url")." 
+                $db->query("DELETE FROM ".Piwik::prefixTable("site")."
 					WHERE idsite = ?", $idSite);
 		
 		$db->query("DELETE FROM ".Piwik::prefixTable("access")." 
diff --git a/plugins/VisitorInterest/VisitorInterest.php b/plugins/VisitorInterest/VisitorInterest.php
index 3f36d8b..1b9081d 100644
--- a/plugins/VisitorInterest/VisitorInterest.php
+++ b/plugins/VisitorInterest/VisitorInterest.php
@@ -115,14 +115,14 @@ class Piwik_VisitorInterest extends Piwik_Plugin
 			{
 				$minGap = $gap[0];
 				$maxGap = $gap[1];
-				$gapName = "'$minGap-$maxGap'";
+				$gapName = '"$minGap-$maxGap"';
 				$select[] = "sum(case when visit_total_actions between $minGap and $maxGap then 1 else 0 end) as $gapName ";
 			}
 			else
 			{
 				$minGap = $gap[0];
 				$plusEncoded = urlencode('+');
-				$gapName = "'".$minGap.$plusEncoded."'";
+				$gapName = '"'.$minGap.$plusEncoded.'"';
 				$select[] = "sum(case when visit_total_actions > $minGap then 1 else 0 end) as $gapName ";
 			}
 		}		
@@ -141,13 +141,13 @@ class Piwik_VisitorInterest extends Piwik_Plugin
 				$minGap = $gap[0] * 60;
 				$maxGap = $gap[1] * 60;
 				
-				$gapName = "'".$minGap."-".$maxGap."'";
+				$gapName = '"'.$minGap."-".$maxGap.'"';
 				$select[] = "sum(case when visit_total_time between $minGap and $maxGap then 1 else 0 end) as $gapName ";
 			}
 			else
 			{
 				$minGap = $gap[0] * 60;
-				$gapName = "'$minGap'";
+				$gapName = '"$minGap"';
 				$select[] = "sum(case when visit_total_time > $minGap then 1 else 0 end) as $gapName ";
 			}
 		}		
diff --git a/tests/config.ini.template.php b/tests/config.ini.template.php
index 4fbbcb8..f3da4e0 100644
--- a/tests/config.ini.template.php
+++ b/tests/config.ini.template.php
@@ -15,7 +15,7 @@ port=		@database.main.port@
 username=	@database.main.username@
 password=	@database.main.password@
 dbname=		@database.main.name@
-adapter=	PDO_MYSQL
+adapter=	PDO_PGSQL
 tables_prefix=	piwik_
 
 [database_tests]
@@ -24,5 +24,5 @@ port=		@database.test.port@
 username=	@database.test.username@
 password=	@database.test.password@
 dbname=		@database.test.name@
-adapter=	PDO_MYSQL
+adapter=	PDO_PGSQL
 tables_prefix=	piwiktests_
diff --git a/tests/core/Database.test.php b/tests/core/Database.test.php
index ef2726a..c9faaf2 100755
--- a/tests/core/Database.test.php
+++ b/tests/core/Database.test.php
@@ -43,6 +43,10 @@ class Test_Database extends UnitTestCase
 	
 	public function tearDown()
 	{
+		# FIXME  pgsql can not drop when already connected to the db !
+		Piwik::disconnectDatabase();
+		Piwik::createConfigObject();
+		Piwik::createDatabaseObject();
 		Piwik::dropTestDatabase();
 		Piwik::disconnectDatabase();
 	}
